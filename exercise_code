#!/usr/bin/env python
# -*- coding: utf-8 -*-

1. 比较版本号大小
方法一:
c = raw_input('first version number: ')
d = raw_input('second version number: ')

x, y = [0]*9, [0]*9

a = c.split('.')
b = d.split('.')

def update(m, n):
    'm is a|b, n is x|y'
    for i in range(len(m)):        
        n[i] = int(m[i])

def compare(q, p):
    if cmp(q, p) == 1:
        print '\n%s is bigger! ' %c
    elif cmp(q, p) == -1:
        print '\n%s is bigger! ' %d
    else:
        print 'equal!'
        
update(a, x)
update(b, y)
compare(x, y)
'-------'
方法二:
from distutils.version import LooseVersion

print LooseVersion("2.3.1") < LooseVersion("2.3.1a")

2. 统计指定范围内的素数
方法一:
for i in range(2, 100):
    for j in range(2, i):
        if (i % j) == 0:
            break
    else:
        print '%d is prime! ' %i
'-------'
方法二:
def odd(m):
    return m % 2 == 1

n = filter(odd, range(2, 100))

x = 0

for i in n:
    for j in range(2, i):
        if (i % j) == 0:
            break
    else:
        print '%d is prime! ' %i
        x += 1
print 'total is %d. ' %x
'-------'
方法三:
x = int(raw_input('enter the number more than 1: '))

for a in range(1, x+1):
    for b in range(2, a):
        if a % b == 0:
            print a, 'is the result of', b, '*', a/b
            break
    else:
        print a, 'is the prime! '

5. 冒泡排序算法
array = [1, 2, 5, 3, 6, 8, 4]

for i in range(len(array) - 1, 0, -1):
    for j in range(0, i):
        if array[j] > array[j + 1]:
            array[j], array[j + 1] = array[j + 1], array[j]
print array

6. 计算指定日期为该年的第几天(含判断闰年)
class Input(object):
    def input_year(self):
        a = int(raw_input('input year: '))
        if not (a > 0):
            raise Exception('must greater than 0! ')
        return a
    def input_month(self):
        b = int(raw_input('input month: '))
        if not (0 < b < 13):
            raise Exception('must greater than 0 and less than 13! ')
        return b
    def input_day(self):
        c = int(raw_input('input day: '))
        if not (0 < c < 32):
            raise Exception('must greater than 0 and less than 32! ')
        return c

x = Input()
y = Input()
z = Input()
year = x.input_year()
month = y.input_month()
day = z.input_day()

months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
total = 0

if ((year % 4 == 0) and (year % 100 != 0)) or (year % 400 == 0):
    months[1] = 29
if month-1 == 0:
    print day
else:
    for i in range(month-1):
        total += months[i]
    print total+day

7. 由指定数字组成无重复三位数
list = [str(x) + str(y) + str(z) \
for x in range(1, 5) for y in range(1, 5) for z in range(1, 5) \
if (x != y) and (x != z) and (y != z)]

for item in list:
    print item

8. 录入并显示员工信息
class Employee(object):
    emp_count = 0

    def __init__(self, name, salary):
        self.name = name
        self.salary = salary
        Employee.emp_count += 1

    def display_count(self):
        print 'total employee %d' %Employee.emp_count

    def display_employee(self):
        print 'name: ', self.name, ', salary: ', self.salary

emp1 = Employee('zara', 2000)
emp2 = Employee('mani', 5000)

emp1.display_employee()
emp2.display_employee()

print 'total employee %d' %Employee.emp_count

9. 打印乘法口诀表
for i in range(1, 10):
    n = i
    m = 10
    for j in range(1, n+1):
        print ('%d * %d = %d ' %(j, i, j*i)),
        m -= 1
    if m > 1:
        print '', '\n', '---------'

10. 打印斐波那契数列
x = int(raw_input('print the fibonacci sequence less than: '))

def fib(n):
    a, b = 0, 1
    while b < n:
        a, b = b, a + b
        print a,

fib(x)

11. 分解质因数
方法一:
def showcase(n):
    print '{} ='.format(n),
    while n is not 1:
        for j in xrange(2, n+1):
            if n % j == 0:
                n /= j
                if n == 1: 
                    print j, '\n' 
                else:
                    print '{} *'.format(j),
                break

x = 0

while x is not exit:
    try:
        x = input('enter a number which can prime factorization(input exit to leave! ): ')
    except:
        print 'please input a number! \n'
    else:
        if not isinstance(x, int) or x <= 1:
            print 'please input a positive integer greater than one! \n'
        else:
            for i in range(2, x):
                if x % i == 0:
                    showcase(x)
                    break
            else:
                print '{} is a prime number! \n'.format(x)
else:
    print 'ByeBye! '
'-------'
方法二:
def showcase(n):
    global list1, list2
    list1 = []
    list2 = []
    for i in range(2, n+1):
        for j in range(2, i):
            if i % j == 0:
                break
        else:
            list1.append(i)
    while n not in list1:
        for k in range(2, n+1):
            if n % k == 0:
                n /= k
                list2.append(k)
                break
    else:
        list2.append(n)

x = 0

while x is not exit:
    try:
        x = input('enter a number which can prime factorization(input exit to leave! ): ')
    except:
        print 'please input a number! \n'
    else:
        if not isinstance(x, int) or x <= 1:
            print 'please input a positive integer greater than one! \n'
        else:
            for i in range(2, x):
                if x % i == 0:
                    showcase(x)
                    print x, 'is consist of the prime factor in list:', list2, '\n'
                    break
            else:
                print '{} is a prime number! \n'.format(x)
else:
    print 'ByeBye! '
